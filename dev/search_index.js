var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Functions for the package are listed as follows.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"In this package, we can use the Penealized Updated Properties Model approach for topology optimization of 2D and 3D structures","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"functions/#PUPM.C_orthotropic-Tuple{Any, Any, Any}","page":"Functions","title":"PUPM.C_orthotropic","text":"stiffness matrix for orthotropic\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.apply_nodal_force_3d!-NTuple{5, Any}","page":"Functions","title":"PUPM.apply_nodal_force_3d!","text":"function to apply nodal forces to external force vector in 3D\n\napply_nodal_force_3d!(grid, node_set_name, load_vector, f_ext)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.assemble_cell!-NTuple{4, Any}","page":"Functions","title":"PUPM.assemble_cell!","text":"Function for the local stiffness matrix(element stiffness matrix)\n\nassemble_cell!(ke, cell_values, E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.assemble_cell_3d!-NTuple{4, Any}","page":"Functions","title":"PUPM.assemble_cell_3d!","text":"function to assemble the local stiffness matrix for 3D\n\nassemble_cell_3d!(ke, cell_values, E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.assemble_external_forces!-NTuple{5, Any}","page":"Functions","title":"PUPM.assemble_external_forces!","text":"Function for  external forces from surface tractions\n\nassemble_external_forces!(f_ext, dh, facetset, facet_values, traction)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.assemble_external_forces_3d!-NTuple{5, Any}","page":"Functions","title":"PUPM.assemble_external_forces_3d!","text":"function to assemble external forces from surface tractions in 3D\n\nassemble_external_forces_3d!(f_ext, dh, facetset, facet_values, traction)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.assemble_external_pressure!-NTuple{5, Any}","page":"Functions","title":"PUPM.assemble_external_pressure!","text":"Function for  external forces from pressure\n\nassemble_external_pressure!(f_ext, dh, facetset, facet_values, pressure)\n\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.assemble_external_pressure_3d!-NTuple{5, Any}","page":"Functions","title":"PUPM.assemble_external_pressure_3d!","text":"function to assemble external forces from pressure in 3D\n\nassemble_external_pressure_3d!(f_ext, dh, facetset, facet_values, pressure)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.assemble_global!-NTuple{5, Any}","page":"Functions","title":"PUPM.assemble_global!","text":"Function for the global stiffness matrix\n\nassemble_global!(K, dh, cell_values, E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.assemble_global_3d!-NTuple{5, Any}","page":"Functions","title":"PUPM.assemble_global_3d!","text":"function to assemble the global stiffness matrix for 3D\n\nassemble_global_3d!(K, dh, cell_values, E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.calculate_H-NTuple{6, Any}","page":"Functions","title":"PUPM.calculate_H","text":"Function to calculate parameter H\n\ncalculate_H(grid, dh, cv, u, E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.calculate_H_3d-NTuple{6, Any}","page":"Functions","title":"PUPM.calculate_H_3d","text":"function to calculate parameter H in 3D\n\ncalculate_H_3d(grid, dh, cv, u, E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.calculate_average_strain_energy-NTuple{6, Any}","page":"Functions","title":"PUPM.calculate_average_strain_energy","text":"Function to calculate the average strain energy\n\ncalculate_average_strain_energy(grid, dh, cv, u, E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.calculate_cell_volume-Tuple{Any}","page":"Functions","title":"PUPM.calculate_cell_volume","text":"Function to calculate the cell volume\n\ncalculate_cell_volume(cv)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.calculate_strain_energy-NTuple{6, Any}","page":"Functions","title":"PUPM.calculate_strain_energy","text":"Function to calculate element strain energy\n\ncalculate_strain_energy(grid, dh, cv, u, E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.calculate_strain_energy_3d-NTuple{6, Any}","page":"Functions","title":"PUPM.calculate_strain_energy_3d","text":"function to calculate element strain energy in 3D\n\ncalculate_strain_energy_3d(grid, dh, cv, u, E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.calculate_strains-NTuple{4, Any}","page":"Functions","title":"PUPM.calculate_strains","text":"Function to calculate strains\n\ncalculate_strains(grid, dh, cv, u)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.calculate_strains_3d-NTuple{4, Any}","page":"Functions","title":"PUPM.calculate_strains_3d","text":"function to calculate strains in 3D\n\ncalculate_strains_3d(grid, dh, cv, u)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.calculate_stresses-NTuple{6, Any}","page":"Functions","title":"PUPM.calculate_stresses","text":"Function to calculate stresses\n\ncalculate_stresses(grid, dh, cv, u, E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.calculate_stresses_3d-NTuple{6, Any}","page":"Functions","title":"PUPM.calculate_stresses_3d","text":"function to calculate stresses in 3D\n\ncalculate_stresses_3d(grid, dh, cv, u, E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.fem_solver-Tuple{DynamicParams}","page":"Functions","title":"PUPM.fem_solver","text":"Main finite element solver for two dimension\n\nfem_solver(par::DynamicParams)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.fem_solver_3d-Tuple{DynamicParams}","page":"Functions","title":"PUPM.fem_solver_3d","text":"Main finite element solver for 3D\n\nfem_solver_3d(par::DynamicParams)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.filter_density_to_vf!-NTuple{4, Any}","page":"Functions","title":"PUPM.filter_density_to_vf!","text":"function to apply volume fraction\n\nexample:\n\nρnew = rand(Float64, 8)\nnx, ny , nz = 2 , 2 , 2\nvf = 0.5\nη = π/4\n\nρ =  filter_density_to_vf!(ρnew, vf, nx, ny, nz, η)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.get_material_matrix-Tuple{Any, Any}","page":"Functions","title":"PUPM.get_material_matrix","text":"Get the material matrix C\n\nget_material_matrix(E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.get_material_matrix_3d-Tuple{Any, Any}","page":"Functions","title":"PUPM.get_material_matrix_3d","text":"function to get the material matrix for 3D\n\nget_material_matrix_3d(E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.get_material_matrix_derivative_wrt_E-Tuple{Any, Any}","page":"Functions","title":"PUPM.get_material_matrix_derivative_wrt_E","text":"Function to calculate the derivative of the strain energy with respect to the Young's modulus\n\nget_material_matrix_derivative_wrt_E(E, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.get_material_matrix_derivative_wrt_E_3d-Tuple{Any, Any}","page":"Functions","title":"PUPM.get_material_matrix_derivative_wrt_E_3d","text":"function to get the derivative of the material matrix with respect to the Young's modulus in 3D\n\nget_material_matrix_derivative_wrt_E_3d(E::Vector{Float64,1}, ν)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.remove_vtk_files-Tuple{String}","page":"Functions","title":"PUPM.remove_vtk_files","text":"function to remove vtu file \n\nremove_vtk_files(directory::String)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.top_upm-Tuple{DynamicParams, String, String}","page":"Functions","title":"PUPM.top_upm","text":"function to perform topology optimization using UPM approach (2D case)\n\ntop_upm(par::DynamicParams, name_of_file::String, directory::String)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.top_upm_3d-Tuple{DynamicParams, String, String}","page":"Functions","title":"PUPM.top_upm_3d","text":"function to perform topology optimization using UPM approach (3D case)\n\ntop_upm_3d(par::DynamicParams, name_of_file::String, directory::String)\n\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.transfer_to_density-Tuple{Vector{Float64}, Float64, Float64, Int64}","page":"Functions","title":"PUPM.transfer_to_density","text":"function to convert Young's modulus to density     E = E0(rho/rho0)^gamma\n\nExample:\n\nEnew = rand(Float64, 5)\nE0 = 1.0\nρ0 = 1.0\nγ = 1\nρ = transfer_to_density(Enew, E0, ρ0, γ)\n\n\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.transfer_to_young-Tuple{Vector{Float64}, Float64, Float64, Int64, Float64, Float64}","page":"Functions","title":"PUPM.transfer_to_young","text":"function to transfer density to young modulus example: ρnew = rand(Float64, 4) E0 = 1.0 ρ0 = 1.0 γ = 1 Emin = 1e-4 Emax = 1.0\n\ntransfertoyoung(ρnew , E0, ρ0, γ, Emin , Emax)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.update_upm-Tuple{Int64, Vector{Float64}, Vector{Float64}, Float64, Float64}","page":"Functions","title":"PUPM.update_upm","text":"function for update Young's modulus based on UPM approach\n\nExample:\n\nk = 1\nE = rand(Float64, 5)\nH = rand(Float64, 5)\nEmax = 1.0\nEmin = 1e-4\n# test code\nEnew = update_upm!(k, E, H,Emax,Emin)\n\n\n\n\n\n\n","category":"method"},{"location":"functions/#PUPM.vertexdofs-Tuple{Ferrite.DofHandler, Ferrite.VertexIndex}","page":"Functions","title":"PUPM.vertexdofs","text":"Function to apply nodal forces to external force vector\n\napply_nodal_force!(grid, node_set_name, load_vector, f_ext)\n\n\n\n\n\n","category":"method"},{"location":"examples/2d_cantilever/#Example-for-2D-Cantilever","page":"2D Cantilever","title":"Example for 2D Cantilever","text":"","category":"section"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"Load the package","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"using Revise\nusing Ferrite\nusing PUPM","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"Generate a dynamic struc for fem inputs","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"par = DynamicParams() ","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"Function to generate grid (mesh and geometry)","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"# faces and nodes at the boundary are defiend\nfunction create_grid(Lx, Ly, nx, ny)\n    corners = [\n        Ferrite.Vec{2}((0.0, 0.0)), Ferrite.Vec{2}((Lx, 0.0)),\n        Ferrite.Vec{2}((Lx, Ly)), Ferrite.Vec{2}((0.0, Ly))\n    ]\n    grid = Ferrite.generate_grid(Ferrite.Quadrilateral, (nx, ny), corners)\n    addnodeset!(grid, \"clamped\", x -> x[1] ≈ 0.0)\n    addfacetset!(grid, \"traction\", x -> x[1] ≈ Lx && norm(x[2] - 0.5) <= 0.05)\n    return grid\nend\n","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"Function to create CellValues and FacetValues","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"function create_values()\n    dim, order = 2, 1\n    ip = Ferrite.Lagrange{Ferrite.RefQuadrilateral, order}()^dim\n    qr = Ferrite.QuadratureRule{Ferrite.RefQuadrilateral}(2)\n    qr_face = Ferrite.FacetQuadratureRule{Ferrite.RefQuadrilateral}(1)\n    cell_values = Ferrite.CellValues(qr, ip)\n    facet_values = Ferrite.FacetValues(qr_face, ip)\n    return cell_values, facet_values\nend\n","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"Function to create DofHandler (degrees of freedom )","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"function create_dofhandler(grid)\n    dh = Ferrite.DofHandler(grid)\n    Ferrite.add!(dh, :u, Ferrite.Lagrange{Ferrite.RefQuadrilateral, 1}()^2)\n    Ferrite.close!(dh)\n    return dh\nend\n","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"Function to create Dirichlet boundary conditions","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"function create_bc(dh)\n    ch = Ferrite.ConstraintHandler(dh)\n    add!(ch, Dirichlet(:u, getnodeset(dh.grid, \"clamped\"), (x, t) -> [0.0, 0.0], [1, 2]))\n    Ferrite.close!(ch)\n    return ch\nend\n","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"Define parameters for fem input","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"Lx, Ly = 2.0, 1.0  # Plate dimensions\nnx, ny = 120, 60   # Number of elements along x and y\ngrid = create_grid(Lx, Ly, nx, ny)  # Generate the grid\n\npar.tnele = length(grid.cells)  # Total number of elements\npar.grid = grid\n# Create DOF handler and constraints\npar.dh = create_dofhandler(grid)\npar.ch = create_bc(par.dh )\n\n# Create CellValues and FacetValues\npar.cell_values, par.facet_values = create_values()\n\n# Define loads\npressure_value = 1.  # Example pressure in Pascals\npar.loads = [LoadCondition(\"traction_load\", [0.0, -pressure_value])]  # Load applied to the \"traction\" facet\n# Neumann BC facet set\npar.Neumann_bc = getfacetset(grid, \"traction\")","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"Define top input parameters","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"# Material properties\npar.E0 = 1.0                \npar.E = fill(par.E0, Ferrite.getncells(grid))  # Initialize Young's modulus for all cells\npar.ν = 0.3 # Poisson's ratio \n# Optimization parameters\npar.Emin = 1e-4             # Minimum Young's moduluspar.\npar.Emax = 1.0              # Maximum Young's modulus\npar.ρ0 = 1.0                # Initial density\npar.tol = 1e-3            # Convergence tolerance\npar.γ = 1           # Penalty factor\npar.η = π /(4)              # Filter parameter\npar.k = 8                  # Sensitivity parameter\npar.vf = 0.5                # Volume fraction\npar.max_itr = 200","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"Define file name to save data in vtu and defin dir","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"file_name = \"linear_elasticty\"\ndir = \"/Users/aminalibakhshi/Desktop/vtu_geo/\" #(change to your dir)","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"Function to remove already present vtu files in dir (optional)","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"remove_vtk_files(dir)\n","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"Function to run topology optimization","category":"page"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"top_upm(par, file_name, dir)","category":"page"},{"location":"examples/2d_cantilever/#Plain-program","page":"2D Cantilever","title":"Plain program","text":"","category":"section"},{"location":"examples/2d_cantilever/","page":"2D Cantilever","title":"2D Cantilever","text":"using Revise\nusing Ferrite\nusing PUPM\n\npar = DynamicParams() \n\n# faces and nodes at the boundary are defiend\nfunction create_grid(Lx, Ly, nx, ny)\n    corners = [\n        Ferrite.Vec{2}((0.0, 0.0)), Ferrite.Vec{2}((Lx, 0.0)),\n        Ferrite.Vec{2}((Lx, Ly)), Ferrite.Vec{2}((0.0, Ly))\n    ]\n    grid = Ferrite.generate_grid(Ferrite.Quadrilateral, (nx, ny), corners)\n    addnodeset!(grid, \"clamped\", x -> x[1] ≈ 0.0)\n    addfacetset!(grid, \"traction\", x -> x[1] ≈ Lx && norm(x[2] - 0.5) <= 0.05)\n    return grid\nend\n\nfunction create_values()\n    dim, order = 2, 1\n    ip = Ferrite.Lagrange{Ferrite.RefQuadrilateral, order}()^dim\n    qr = Ferrite.QuadratureRule{Ferrite.RefQuadrilateral}(2)\n    qr_face = Ferrite.FacetQuadratureRule{Ferrite.RefQuadrilateral}(1)\n    cell_values = Ferrite.CellValues(qr, ip)\n    facet_values = Ferrite.FacetValues(qr_face, ip)\n    return cell_values, facet_values\nend\n\nfunction create_dofhandler(grid)\n    dh = Ferrite.DofHandler(grid)\n    Ferrite.add!(dh, :u, Ferrite.Lagrange{Ferrite.RefQuadrilateral, 1}()^2)\n    Ferrite.close!(dh)\n    return dh\nend\n\nfunction create_bc(dh)\n    ch = Ferrite.ConstraintHandler(dh)\n    add!(ch, Dirichlet(:u, getnodeset(dh.grid, \"clamped\"), (x, t) -> [0.0, 0.0], [1, 2]))\n    Ferrite.close!(ch)\n    return ch\nend\n\nLx, Ly = 2.0, 1.0  # Plate dimensions\nnx, ny = 120, 60   # Number of elements along x and y\ngrid = create_grid(Lx, Ly, nx, ny)  # Generate the grid\n\npar.tnele = length(grid.cells)  # Total number of elements\npar.grid = grid\n# Create DOF handler and constraints\npar.dh = create_dofhandler(grid)\npar.ch = create_bc(par.dh )\n\n# Create CellValues and FacetValues\npar.cell_values, par.facet_values = create_values()\n\n# Define loads\npressure_value = 1.  # Example pressure in Pascals\npar.loads = [LoadCondition(\"traction_load\", [0.0, -pressure_value])]  # Load applied to the \"traction\" facet\n# Neumann BC facet set\npar.Neumann_bc = getfacetset(grid, \"traction\")\n\n# Material properties\npar.E0 = 1.0                \npar.E = fill(par.E0, Ferrite.getncells(grid))  # Initialize Young's modulus for all cells\npar.ν = 0.3 # Poisson's ratio \n# Optimization parameters\npar.Emin = 1e-4             # Minimum Young's moduluspar.\npar.Emax = 1.0              # Maximum Young's modulus\npar.ρ0 = 1.0                # Initial density\npar.tol = 1e-3            # Convergence tolerance\npar.γ = 1           # Penalty factor\npar.η = π /(4)              # Filter parameter\npar.k = 8                  # Sensitivity parameter\npar.vf = 0.5                # Volume fraction\npar.max_itr = 200\n\nfile_name = \"linear_elasticty\"\ndir = \"/Users/aminalibakhshi/Desktop/vtu_geo/\" # (change to your dir)\n\nremove_vtk_files(dir)\n\ntop_upm(par, file_name, dir)\n","category":"page"},{"location":"install/#Install","page":"Install","title":"Install","text":"","category":"section"},{"location":"install/#Installation","page":"Install","title":"Installation","text":"","category":"section"},{"location":"install/","page":"Install","title":"Install","text":"You can install the package using Julia’s package manager:","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"julia> ]\n\n(@v1.11) pkg> add https://github.com/Aminofa70/PUPM.jl","category":"page"},{"location":"#PUPM","page":"Home","title":"PUPM","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to Documentation for PUPM.","category":"page"}]
}
